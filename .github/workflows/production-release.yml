name: Production Release

on:
  push:
    branches:
      - main

jobs:
  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' frontend/time_manager/pubspec.yaml | sed 's/version: *//' | tr -d ' ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Get latest tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -1 || echo "")
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tag found, this will be the first release"
            echo "latest_tag=" >> $GITHUB_OUTPUT
            echo "latest_version=0.0.0" >> $GITHUB_OUTPUT
          else
            LATEST_VERSION=${LATEST_TAG#v}
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "Latest tag: $LATEST_TAG (version: $LATEST_VERSION)"
          fi

      - name: Compare versions
        id: compare
        run: |
          NEW_VERSION="${{ steps.version.outputs.version }}"
          LATEST_VERSION="${{ steps.latest_tag.outputs.latest_version }}"

          # Function to compare semantic versions
          version_gt() {
            test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
          }

          if [ "$LATEST_VERSION" = "0.0.0" ]; then
            echo "First release, skipping version comparison"
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [ "$NEW_VERSION" = "$LATEST_VERSION" ]; then
            echo "Error: Version $NEW_VERSION is the same as the latest version"
            echo "Please increment the version in pubspec.yaml"
            exit 1
          elif version_gt "$NEW_VERSION" "$LATEST_VERSION"; then
            echo "Version $NEW_VERSION is greater than $LATEST_VERSION ✓"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "Error: Version $NEW_VERSION is lower than or equal to the latest version $LATEST_VERSION"
            echo "Please update pubspec.yaml with a higher version"
            exit 1
          fi

      - name: Check if tag already exists
        run: |
          NEW_TAG="v${{ steps.version.outputs.version }}"
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Error: Tag $NEW_TAG already exists"
            echo "Please use a different version number"
            exit 1
          fi
          echo "Tag $NEW_TAG does not exist, proceeding..."

      - name: Create and push tag
        if: steps.compare.outputs.should_release == 'true'
        run: |
          NEW_TAG="v${{ steps.version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"
          echo "Created and pushed tag: $NEW_TAG"

      - name: Summary
        if: steps.compare.outputs.should_release == 'true'
        run: |
          echo "✓ Release tag v${{ steps.version.outputs.version }} created successfully"
          echo "✓ This will trigger the APK build and GitHub Release"
