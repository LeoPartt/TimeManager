# Production Docker Compose Configuration
# Usage: docker compose -f compose.prod.yaml up -d
# Required: .env file with DB credentials

services:
  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      LANG: en_US.utf8
      LC_ALL: en_US.utf8
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - time-manager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    image: time-manager-backend:latest
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      SPRING_PROFILES_ACTIVE: prod
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: "false"
    networks:
      - time-manager-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile.prod
    image: time-manager-frontend:latest
    volumes:
      - apk_output:/app/build/app/outputs/flutter-apk
      - aab_output:/app/build/app/outputs/bundle/release
    networks:
      - time-manager-network

networks:
  time-manager-network:
    driver: bridge

volumes:
  postgres_data:
  apk_output:
  aab_output: